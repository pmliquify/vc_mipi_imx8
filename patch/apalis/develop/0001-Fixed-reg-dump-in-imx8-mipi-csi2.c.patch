From f782f49818d75610f4d8eb1f52e687d9360e09af Mon Sep 17 00:00:00 2001
From: Peter Martienssen <peter.martienssen@liquify-consulting.de>
Date: Thu, 13 Jan 2022 11:09:28 +0100
Subject: [PATCH 1/3] Fixed reg dump in imx8-mipi-csi2.c

---
 drivers/staging/media/imx/imx8-mipi-csi2.c | 87 ++++++++++++++--------
 1 file changed, 56 insertions(+), 31 deletions(-)

diff --git a/drivers/staging/media/imx/imx8-mipi-csi2.c b/drivers/staging/media/imx/imx8-mipi-csi2.c
index 0227a4f25538..c9a7fb933c89 100644
--- a/drivers/staging/media/imx/imx8-mipi-csi2.c
+++ b/drivers/staging/media/imx/imx8-mipi-csi2.c
@@ -6,6 +6,8 @@
  *
  */
 
+// #define DEBUG
+
 #include <linux/clk.h>
 #include <linux/delay.h>
 #include <linux/device.h>
@@ -359,6 +361,7 @@ static int calc_hs_settle(struct mxc_mipi_csi2_dev *csi2dev, u32 dphy_clk)
 	return rxhs_settle;
 }
 
+#ifdef DEBUG
 static void mxc_mipi_csi2_reg_dump(struct mxc_mipi_csi2_dev *csi2dev)
 {
 	struct device *dev = &csi2dev->pdev->dev;
@@ -366,50 +369,69 @@ static void mxc_mipi_csi2_reg_dump(struct mxc_mipi_csi2_dev *csi2dev)
 		u32 offset;
 		const char name[32];
 	} registers[] = {
-		{ 0x100, "MIPI CSI2 HC num of lanes" },
-		{ 0x104, "MIPI CSI2 HC dis lanes" },
-		{ 0x108, "MIPI CSI2 HC BIT ERR" },
-		{ 0x10C, "MIPI CSI2 HC IRQ STATUS" },
-		{ 0x110, "MIPI CSI2 HC IRQ MASK" },
-		{ 0x114, "MIPI CSI2 HC ULPS STATUS" },
-		{ 0x118, "MIPI CSI2 HC DPHY ErrSotHS" },
-		{ 0x11c, "MIPI CSI2 HC DPHY ErrSotSync" },
-		{ 0x120, "MIPI CSI2 HC DPHY ErrEsc" },
-		{ 0x124, "MIPI CSI2 HC DPHY ErrSyncEsc" },
-		{ 0x128, "MIPI CSI2 HC DPHY ErrControl" },
-		{ 0x12C, "MIPI CSI2 HC DISABLE_PAYLOAD" },
-		{ 0x130, "MIPI CSI2 HC DISABLE_PAYLOAD" },
-		{ 0x180, "MIPI CSI2 HC IGNORE_VC" },
-		{ 0x184, "MIPI CSI2 HC VID_VC" },
-		{ 0x188, "MIPI CSI2 HC FIFO_SEND_LEVEL" },
-		{ 0x18C, "MIPI CSI2 HC VID_VSYNC" },
-		{ 0x190, "MIPI CSI2 HC VID_SYNC_FP" },
-		{ 0x194, "MIPI CSI2 HC VID_HSYNC" },
-		{ 0x198, "MIPI CSI2 HC VID_HSYNC_BP" },
-		{ 0x000, "MIPI CSI2 CSR PLM_CTRL" },
-		{ 0x004, "MIPI CSI2 CSR PHY_CTRL" },
-		{ 0x008, "MIPI CSI2 CSR PHY_Status" },
+		{ 0x100, "MIPI CSI2 HC num of lanes    " },
+		{ 0x104, "MIPI CSI2 HC dis lanes       " },
+		{ 0x108, "MIPI CSI2 HC BIT ERR         " },
+		{ 0x10C, "MIPI CSI2 HC IRQ STATUS      " },
+		{ 0x110, "MIPI CSI2 HC IRQ MASK        " },
+		{ 0x114, "MIPI CSI2 HC ULPS STATUS     " },
+		{ 0x118, "MIPI CSI2 HC DPHY ErrSotHS   " },
+		{ 0x11c, "MIPI CSI2 HC DPHY ErrSotSync " },
+		{ 0x120, "MIPI CSI2 HC DPHY ErrEsc     " },
+		{ 0x124, "MIPI CSI2 HC DPHY ErrSyncEsc " },
+		{ 0x128, "MIPI CSI2 HC DPHY ErrControl " },
+		{ 0x12C, "MIPI CSI2 HC DISABLE_PAYLOAD " },
+		{ 0x130, "MIPI CSI2 HC DISABLE_PAYLOAD " },
+		{ 0x180, "MIPI CSI2 HC IGNORE_VC       " },
+		{ 0x184, "MIPI CSI2 HC VID_VC          " },
+		{ 0x188, "MIPI CSI2 HC FIFO_SEND_LEVEL " },
+		{ 0x18C, "MIPI CSI2 HC VID_VSYNC       " },
+		{ 0x190, "MIPI CSI2 HC VID_SYNC_FP     " },
+		{ 0x194, "MIPI CSI2 HC VID_HSYNC       " },
+		{ 0x198, "MIPI CSI2 HC VID_HSYNC_BP    " },
+	};
+	u32 i;
+
+	dev_dbg(dev, "MIPI CSI2 CSR and HC register dump, mipi csi%d\n", csi2dev->id);
+	for (i = 0; i < ARRAY_SIZE(registers); i++) {
+		u32 reg = readl(csi2dev->base_regs + registers[i].offset);
+		dev_dbg(dev, "%20s[0x%03x]: 0x%08x\n",
+			registers[i].name, registers[i].offset, reg);
+	}
+}
+
+static void mxc_mipi_csi2_reg_dump2(struct mxc_mipi_csi2_dev *csi2dev)
+{
+	struct device *dev = &csi2dev->pdev->dev;
+	struct {
+		u32 offset;
+		const char name[32];
+	} registers[] = {
+		{ 0x000, "MIPI CSI2 CSR PLM_CTRL       " },
+		{ 0x004, "MIPI CSI2 CSR PHY_CTRL       " },
+		{ 0x008, "MIPI CSI2 CSR PHY_Status     " },
 		{ 0x010, "MIPI CSI2 CSR PHY_Test_Status" },
 		{ 0x014, "MIPI CSI2 CSR PHY_Test_Status" },
 		{ 0x018, "MIPI CSI2 CSR PHY_Test_Status" },
 		{ 0x01C, "MIPI CSI2 CSR PHY_Test_Status" },
 		{ 0x020, "MIPI CSI2 CSR PHY_Test_Status" },
-		{ 0x030, "MIPI CSI2 CSR VC Interlaced" },
-		{ 0x038, "MIPI CSI2 CSR Data Type Dis" },
-		{ 0x040, "MIPI CSI2 CSR 420 1st type" },
-		{ 0x044, "MIPI CSI2 CSR Ctr_Ck_Rst_Ctr" },
-		{ 0x048, "MIPI CSI2 CSR Stream Fencing" },
-		{ 0x04C, "MIPI CSI2 CSR Stream Fencing" },
+		{ 0x030, "MIPI CSI2 CSR VC Interlaced  " },
+		{ 0x038, "MIPI CSI2 CSR Data Type Dis  " },
+		{ 0x040, "MIPI CSI2 CSR 420 1st type   " },
+		{ 0x044, "MIPI CSI2 CSR Ctr_Ck_Rst_Ctr " },
+		{ 0x048, "MIPI CSI2 CSR Stream Fencing " },
+		{ 0x04C, "MIPI CSI2 CSR Stream Fencing " },
 	};
 	u32 i;
 
 	dev_dbg(dev, "MIPI CSI2 CSR and HC register dump, mipi csi%d\n", csi2dev->id);
 	for (i = 0; i < ARRAY_SIZE(registers); i++) {
-		u32 reg = readl(csi2dev->base_regs + registers[i].offset);
-		dev_dbg(dev, "%20s[0x%.3x]: 0x%.3x\n",
+		u32 reg = readl(csi2dev->csr_regs + registers[i].offset);
+		dev_dbg(dev, "%20s[0x%03x]: 0x%08x\n",
 			registers[i].name, registers[i].offset, reg);
 	}
 }
+#endif
 
 static int mipi_sc_fw_init(struct mxc_mipi_csi2_dev *csi2dev, char enable)
 {
@@ -955,7 +977,10 @@ static int mipi_csi2_s_stream(struct v4l2_subdev *sd, int enable)
 			mxc_mipi_csi2_reset(csi2dev);
 			mxc_mipi_csi2_csr_config(csi2dev);
 			mxc_mipi_csi2_enable(csi2dev);
+#ifdef DEBUG
 			mxc_mipi_csi2_reg_dump(csi2dev);
+			mxc_mipi_csi2_reg_dump2(csi2dev);
+#endif
 		}
 	} else {
 		if (!--csi2dev->running)
-- 
2.25.1

